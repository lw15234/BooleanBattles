<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.3">
  <zoom_level>9</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>153</x>
      <y>729</y>
      <w>288</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>base
--
Contains definitions that will be used
throughout program. Succeed and fail print
to terminal and are used for testing.
--
void succeed (char *message)
void fail (char *message)
struct enemy
enum battleState
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>144</x>
      <y>477</y>
      <w>306</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>checkAttack
--
Checks if enemy is weak to chosen attack
--
int checkAttack (int attack, enemy* pEnemy)
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>144</x>
      <y>342</y>
      <w>306</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>damage
--
Damages either player or enemy
Checks to see if the battle has ended
Ends game if so
--
int damageState (int attack, enemy* pEnemy,
    int* enemyHealth, int* playerHealth,
    battleState* pState)
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>504</x>
      <y>108</y>
      <w>243</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>stateMachine
--
Keeps track of battle state
Calls functions from other modules
as battle progresses
--
void runStateMachine (void)
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>135</x>
      <y>558</y>
      <w>324</w>
      <h>153</h>
    </coordinates>
    <panel_attributes>enemy
--
Creates a new enemy
Currently only builds same test enemy
--
struct enemy createEnemy (battleState* pState,
    int* pEnemyHealth)
struct enemy {
    int weakness[];
    int solutions;
    char* equation; }
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>288</x>
      <y>702</y>
      <w>27</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>288</x>
      <y>531</y>
      <w>27</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>288</x>
      <y>450</y>
      <w>27</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>288</x>
      <y>189</y>
      <w>351</w>
      <h>171</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;150.0;130.0;150.0;130.0;40.0;10.0;40.0;10.0;30.0;370.0;30.0;370.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>684</x>
      <y>207</y>
      <w>306</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;60.0;320.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>504</x>
      <y>9</y>
      <w>243</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>booleanBattles
--
Plays the game
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>612</x>
      <y>207</y>
      <w>99</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>90.0;60.0;90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>621</x>
      <y>45</y>
      <w>27</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>549</x>
      <y>261</y>
      <w>279</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>attackAnimation
--
Animates player attacks
--
void attackManager(int attack, display *d,
    int success, currentBattle *battle)
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>549</x>
      <y>684</y>
      <w>288</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>baseDisplay
--
Open and close display
Forward declare structures
--
struct display{
    int width, height;
    SDL_Window *win;
    SDL_Surface *sur;
    SDL_Renderer *ren;
    SDL_Event *e; }
display *createDisplay (int width, int height)
void closeDisplay (display *d)
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>495</x>
      <y>387</y>
      <w>414</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>displayButtons
--
Buttons which control battle
--
button *createButtons(int abilities, display *d);
int renderButtons(button *buttonArray, int abilities,
    int used[], display *d, battleState *pState, 
    currentBattle *battle);
int pressButton(SDL_Event* e, int choice, SDL_Rect buttonPos);
void freeButtons(button *buttonArray, int buttons);
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>522</x>
      <y>558</y>
      <w>351</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>entity
--
Displayobjects on screen
--
currentBattle *createBattle(display *d, enemy *e)
void RenderRefresh(display *d, currentBattle *battle)
void freeBattle(currentBattle *battle)
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>153</x>
      <y>234</y>
      <w>243</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>testInput
--
Gets input from terminal for attacks
Replaced by GUI
--
int playerInput (battleState *pState)
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>684</x>
      <y>342</y>
      <w>27</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>684</x>
      <y>513</y>
      <w>27</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>684</x>
      <y>639</y>
      <w>27</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>846</x>
      <y>261</y>
      <w>243</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=.
map
--
Allows player to select level
Should accept current level and
    highest unlocked level as input
Should output player's selection
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
